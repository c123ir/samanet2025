---
description: 
globs: 
alwaysApply: false
---
# 🔍 MANDATORY: Advanced Real-Time Search & Filter System
## Professional Multi-Word Search Implementation for All Pages

**Version:** 1.0 Professional  
**Status:** ✅ ACTIVE - Auto-Apply to ALL Search/Filter Features  
**Purpose:** Standardized advanced search and filtering across entire project

---

## 🎯 **CRITICAL IMPLEMENTATION RULES**

### **MANDATORY: Apply this system to EVERY search/filter functionality**

When implementing ANY search or filter feature, you MUST use this exact system:

1. ✅ **Real-time search** with debouncing (200ms)
2. ✅ **Multi-word search** with space separator
3. ✅ **AND logic** - all words must match
4. ✅ **Flexible matching** - partial, case-insensitive
5. ✅ **Results highlighting** with yellow background
6. ✅ **Live statistics** showing results count
7. ✅ **Clear button** for easy reset
8. ✅ **Enter key navigation** to first result
9. ✅ **ESC key clear** - clear search from anywhere
10. ✅ **Mobile-responsive** design

---

## 🔧 **MANDATORY Backend Implementation**

### **1. Model Search Method (REQUIRED):**
```php
/**
 * Advanced multi-word search method
 * MANDATORY: Use this exact implementation in ALL models
 */
public function searchWithFilters(string $search = '', array $filters = []): array 
{
    $conditions = ['deleted_at IS NULL'];
    $params = [];
    
    // Multi-word search implementation
    if (!empty($search)) {
        $searchTerms = array_filter(array_map('trim', explode(' ', $search)));
        $searchConditions = [];
        
        foreach ($searchTerms as $index => $term) {
            $paramKey = "search_term_{$index}";
            
            // Search in multiple fields - CUSTOMIZE per model
            $searchConditions[] = "(
                title LIKE :%{$paramKey}% OR 
                id LIKE :%{$paramKey}% OR 
                created_at LIKE :%{$paramKey}% OR 
                CASE 
                    WHEN created_by = 1 THEN 'سیستم'
                    ELSE (SELECT username FROM users WHERE id = main_table.created_by)
                END LIKE :%{$paramKey}%
            )";
            
            $params[$paramKey] = "%{$term}%";
        }
        
        if (!empty($searchConditions)) {
            $conditions[] = '(' . implode(' AND ', $searchConditions) . ')';
        }
    }
    
    // Additional filters
    foreach ($filters as $field => $value) {
        if (!empty($value) && $value !== 'all') {
            $conditions[] = "{$field} = :{$field}";
            $params[$field] = $value;
        }
    }
    
    // Build final query
    $query = "SELECT * FROM table_name WHERE " . implode(' AND ', $conditions) . " ORDER BY created_at DESC";
    
    return $this->db->fetchAll($query, $params);
}
```

### **2. API Endpoint (REQUIRED):**
```php
/**
 * MANDATORY: Search API endpoint for all search features
 */
public function api(): void
{
    header('Content-Type: application/json');
    
    try {
        $search = trim($_GET['search'] ?? '');
        $filters = [
            'status' => $_GET['status'] ?? 'all',
            'category' => $_GET['category'] ?? 'all'
        ];
        
        $results = $this->model->searchWithFilters($search, $filters);
        
        // Process results for highlighting
        $processedResults = [];
        foreach ($results as $item) {
            $processedResults[] = $this->processSearchResult($item, $search);
        }
        
        echo json_encode([
            'success' => true,
            'data' => $processedResults,
            'total' => count($processedResults),
            'search_terms' => array_filter(array_map('trim', explode(' ', $search))),
            'has_search' => !empty($search)
        ]);
    } catch (Exception $e) {
        http_response_code(500);
        echo json_encode([
            'success' => false,
            'error' => 'خطا در جستجو'
        ]);
    }
}

/**
 * Process search results for highlighting
 */
private function processSearchResult(array $item, string $search): array 
{
    if (empty($search)) {
        return $item;
    }
    
    $searchTerms = array_filter(array_map('trim', explode(' ', $search)));
    
    // Highlight in title and other text fields
    foreach (['title', 'description'] as $field) {
        if (isset($item[$field])) {
            $item["{$field}_highlighted"] = $this->highlightSearchTerms($item[$field], $searchTerms);
        }
    }
    
    return $item;
}

/**
 * Highlight search terms in text
 */
private function highlightSearchTerms(string $text, array $terms): string 
{
    foreach ($terms as $term) {
        $text = preg_replace('/(' . preg_quote($term, '/') . ')/iu', '<mark>$1</mark>', $text);
    }
    return $text;
}
```

---

## 🎨 **MANDATORY Frontend Implementation**

### **1. HTML Structure (REQUIRED):**
```html
<!-- MANDATORY: Search container with this exact structure -->
<div class="search-container">
    <!-- Search input with live functionality -->
    <div class="search-input-wrapper">
        <div class="input-group">
            <span class="input-group-text bg-light border-end-0">
                <i class="fas fa-search text-muted"></i>
            </span>
            <input type="text" 
                   id="searchInput" 
                   class="form-control border-start-0 ps-0" 
                   placeholder="جستجو در [موضوع]... (مثال: فوری قرمز، 19 تایید، مهم 1404)"
                   autocomplete="off">
            <button class="btn btn-outline-secondary border-start-0" 
                    id="clearSearch" 
                    type="button" 
                    style="display: none;"
                    title="پاک کردن جستجو">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="search-help-text">
            <small class="text-muted">
                <i class="fas fa-lightbulb me-1"></i>
                نکته: با فاصله بین کلمات جستجوی دقیق‌تری داشته باشید | ESC برای پاک کردن
            </small>
        </div>
    </div>
    
    <!-- Live search statistics -->
    <div class="search-stats mt-2" id="searchStats" style="display: none;">
        <small class="text-info">
            <i class="fas fa-chart-bar me-1"></i>
            <span id="searchResultCount">0</span> نتیجه یافت شد
            <span id="searchTermsDisplay"></span>
        </small>
    </div>
</div>

<!-- MANDATORY: Results container -->
<div id="resultsContainer">
    <!-- Dynamic content will be loaded here -->
</div>

<!-- MANDATORY: Loading indicator -->
<div id="loadingIndicator" class="text-center p-4" style="display: none;">
    <div class="spinner-border spinner-border-sm text-primary me-2"></div>
    در حال جستجو...
</div>

<!-- MANDATORY: No results message -->
<div id="noResultsMessage" class="text-center p-5" style="display: none;">
    <div class="empty-state">
        <i class="fas fa-search-minus fa-3x text-muted mb-3"></i>
        <h5 class="text-muted">نتیجه‌ای یافت نشد</h5>
        <p class="text-muted">
            برای عبارت جستجوی شما هیچ نتیجه‌ای یافت نشد.<br>
            لطفاً کلمات کلیدی دیگری امتحان کنید.
        </p>
    </div>
</div>
```

### **2. CSS Styling (REQUIRED):**
```css
/* MANDATORY: Search system styling */
.search-container {
    margin-bottom: var(--space-4);
}

.search-input-wrapper {
    position: relative;
}

.search-input-wrapper .input-group-text {
    background: var(--gray-50);
    border-color: var(--gray-200);
}

.search-input-wrapper .form-control {
    border-color: var(--gray-200);
    transition: var(--transition);
}

.search-input-wrapper .form-control:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.2rem rgba(94, 58, 238, 0.1);
}

.search-help-text {
    margin-top: var(--space-2);
}

.search-stats {
    padding: var(--space-2) var(--space-3);
    background: rgba(var(--info), 0.1);
    border-radius: var(--radius-md);
    border-left: 3px solid var(--info);
}

/* MANDATORY: Search highlighting */
mark {
    background: #fff3cd !important;
    color: #856404 !important;
    padding: 1px 2px !important;
    border-radius: 2px !important;
    font-weight: 500 !important;
}

[data-theme="dark"] mark {
    background: #664d03 !important;
    color: #ffed4a !important;
}

/* MANDATORY: Empty state styling */
.empty-state {
    padding: var(--space-8);
}

.empty-state i {
    opacity: 0.5;
}

/* MANDATORY: Loading state */
#loadingIndicator {
    color: var(--gray-600);
}

/* MANDATORY: Mobile responsive */
@media (max-width: 768px) {
    .search-input-wrapper {
        margin-bottom: var(--space-3);
    }
    
    .search-help-text {
        font-size: 0.75rem;
    }
}
```

### **3. JavaScript Implementation (REQUIRED):**
```javascript
/**
 * MANDATORY: Advanced Search System Class
 * Use this exact implementation for ALL search features
 */
class AdvancedSearchSystem {
    constructor(config) {
        this.apiUrl = config.apiUrl; // e.g., '/api/tags'
        this.debounceDelay = 200;
        this.currentRequest = null;
        
        // DOM elements
        this.searchInput = document.getElementById('searchInput');
        this.clearButton = document.getElementById('clearSearch');
        this.resultsContainer = document.getElementById('resultsContainer');
        this.loadingIndicator = document.getElementById('loadingIndicator');
        this.noResultsMessage = document.getElementById('noResultsMessage');
        this.searchStats = document.getElementById('searchStats');
        this.searchResultCount = document.getElementById('searchResultCount');
        this.searchTermsDisplay = document.getElementById('searchTermsDisplay');
        
        this.init();
    }
    
    /**
     * Initialize search system
     */
    init() {
        this.bindEvents();
        this.loadInitialData();
    }
    
    /**
     * Bind all event listeners
     */
    bindEvents() {
        // Real-time search with debouncing
        this.searchInput.addEventListener('input', this.debounce((e) => {
            const query = e.target.value.trim();
            this.performSearch(query);
            this.toggleClearButton(query);
        }, this.debounceDelay));
        
        // Clear search functionality
        this.clearButton.addEventListener('click', () => {
            this.clearSearch();
        });
        
        // Enter key navigation to first result
        this.searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.navigateToFirstResult();
            }
            
            // ESC key to clear search when focused on input
            if (e.key === 'Escape') {
                e.preventDefault();
                this.clearSearch();
                this.searchInput.blur();
            }
        });
        
        // Global ESC key to clear search from anywhere
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.searchInput.value && document.activeElement !== this.searchInput) {
                e.preventDefault();
                this.clearSearch();
            }
        });
    }
    
    /**
     * Perform search with API call
     */
    async performSearch(query = '') {
        try {
            // Cancel previous request
            if (this.currentRequest) {
                this.currentRequest.abort();
            }
            
            // Show loading state
            this.showLoading();
            
            // Create new request
            this.currentRequest = new AbortController();
            
            // Build search URL
            const searchParams = new URLSearchParams({
                search: query,
                // Add other filters as needed
                status: 'all'
            });
            
            const response = await fetch(`${this.apiUrl}?${searchParams}`, {
                signal: this.currentRequest.signal,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            
            const data = await response.json();
            
            if (data.success) {
                this.displayResults(data.data, data.total, query, data.search_terms);
            } else {
                throw new Error(data.error || 'Search failed');
            }
            
        } catch (error) {
            if (error.name !== 'AbortError') {
                console.error('Search error:', error);
                this.showError('خطا در جستجو');
            }
        } finally {
            this.hideLoading();
            this.currentRequest = null;
        }
    }
    
    /**
     * Display search results
     */
    displayResults(results, total, query, searchTerms) {
        // Update statistics
        this.updateSearchStats(total, query, searchTerms);
        
        if (results.length === 0) {
            this.showNoResults();
            return;
        }
        
        // Render results
        this.renderResults(results);
        this.hideNoResults();
    }
    
    /**
     * Update search statistics
     */
    updateSearchStats(total, query, searchTerms) {
        this.searchResultCount.textContent = total.toLocaleString('fa-IR');
        
        if (query && searchTerms && searchTerms.length > 0) {
            this.searchTermsDisplay.innerHTML = ` برای "<strong>${query}</strong>" (${searchTerms.length} کلمه)`;
            this.searchStats.style.display = 'block';
        } else {
            this.searchStats.style.display = 'none';
        }
    }
    
    /**
     * Render search results - CUSTOMIZE per page
     */
    renderResults(results) {
        let html = '';
        
        // CUSTOMIZE this based on your data structure
        results.forEach(item => {
            html += this.renderResultItem(item);
        });
        
        this.resultsContainer.innerHTML = html;
        
        // Re-bind any event listeners for new content
        this.bindResultEvents();
    }
    
    /**
     * Render individual result item - CUSTOMIZE per page
     */
    renderResultItem(item) {
        // EXAMPLE implementation - customize based on your needs
        return `
            <div class="result-item" data-id="${item.id}">
                <div class="result-content">
                    <h6 class="result-title">${item.title_highlighted || item.title}</h6>
                    <p class="result-meta">
                        <small class="text-muted">
                            شناسه: #${item.id} | 
                            تاریخ: ${item.created_at} |
                            توسط: ${item.created_by_name || 'سیستم'}
                        </small>
                    </p>
                </div>
                <div class="result-actions">
                    <a href="/page?action=edit&id=${item.id}" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-edit"></i>
                    </a>
                </div>
            </div>
        `;
    }
    
    /**
     * Load initial data
     */
    loadInitialData() {
        this.performSearch('');
    }
    
         /**
      * Clear search
      */
     clearSearch() {
         this.searchInput.value = '';
         this.toggleClearButton(false);
         this.performSearch('');
         // Focus only if called from button click, not ESC key
         if (document.activeElement === this.searchInput) {
             // Don't focus if ESC was pressed to blur
         } else {
             this.searchInput.focus();
         }
     }
    
    /**
     * Toggle clear button visibility
     */
    toggleClearButton(show) {
        this.clearButton.style.display = show ? 'block' : 'none';
    }
    
    /**
     * Navigate to first result
     */
    navigateToFirstResult() {
        const firstResult = this.resultsContainer.querySelector('.result-item');
        if (firstResult) {
            firstResult.scrollIntoView({ behavior: 'smooth', block: 'center' });
            firstResult.classList.add('highlight-result');
            setTimeout(() => {
                firstResult.classList.remove('highlight-result');
            }, 2000);
        }
    }
    
    /**
     * Show loading state
     */
    showLoading() {
        this.loadingIndicator.style.display = 'block';
        this.resultsContainer.style.opacity = '0.5';
    }
    
    /**
     * Hide loading state
     */
    hideLoading() {
        this.loadingIndicator.style.display = 'none';
        this.resultsContainer.style.opacity = '1';
    }
    
    /**
     * Show no results message
     */
    showNoResults() {
        this.noResultsMessage.style.display = 'block';
        this.resultsContainer.style.display = 'none';
    }
    
    /**
     * Hide no results message
     */
    hideNoResults() {
        this.noResultsMessage.style.display = 'none';
        this.resultsContainer.style.display = 'block';
    }
    
    /**
     * Show error message
     */
    showError(message) {
        // You can customize this based on your error handling system
        console.error(message);
        this.hideLoading();
    }
    
    /**
     * Bind events for result items - CUSTOMIZE per page
     */
    bindResultEvents() {
        // Add any additional event listeners for result items
        const resultItems = this.resultsContainer.querySelectorAll('.result-item');
        resultItems.forEach(item => {
            // Example: hover effects, click handlers, etc.
        });
    }
    
    /**
     * Debounce utility function
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

/**
 * MANDATORY: Auto-initialize for every page with search
 */
document.addEventListener('DOMContentLoaded', function() {
    // Check if search elements exist on page
    if (document.getElementById('searchInput')) {
        // CUSTOMIZE the API URL based on current page
        const searchSystem = new AdvancedSearchSystem({
            apiUrl: '/api/current-page' // Change this per page
        });
        
        // Make it globally accessible
        window.searchSystem = searchSystem;
        
        console.log('✅ Advanced Search System initialized');
    }
});
```

---

## 🎯 **IMPLEMENTATION CHECKLIST**

### **✅ For EVERY Page with Search/Filter:**
- [ ] Backend `searchWithFilters()` method implemented
- [ ] API endpoint with `/api/[page]` route
- [ ] Search highlighting in results
- [ ] HTML structure with all required elements
- [ ] CSS styling for search components
- [ ] JavaScript search system initialized
- [ ] Multi-word search support
- [ ] Real-time debounced search
- [ ] Live statistics display
- [ ] Clear button functionality
- [ ] Enter key navigation
- [ ] Mobile responsive design
- [ ] Loading and error states
- [ ] No results handling

### **✅ Required Features:**
- [ ] **Real-time search** (200ms debounce)
- [ ] **Multi-word support** (space-separated)
- [ ] **AND logic** (all words must match)
- [ ] **Flexible matching** (partial, case-insensitive)
- [ ] **Results highlighting** (yellow background)
- [ ] **Live statistics** (count + terms)
- [ ] **Clear functionality** (button + ESC key)
- [ ] **Enter navigation** (scroll to first result)
- [ ] **ESC key clear** (from input field or anywhere)
- [ ] **Mobile responsive** (touch-friendly)

---

## 🔧 **CUSTOMIZATION GUIDELINES**

### **1. Model Customization:**
```php
// Customize search fields based on your model
$searchConditions[] = "(
    title LIKE :%{$paramKey}% OR 
    description LIKE :%{$paramKey}% OR 
    code LIKE :%{$paramKey}% OR 
    category LIKE :%{$paramKey}%
)";
```

### **2. Results Template Customization:**
```javascript
// Customize renderResultItem() method based on your data
renderResultItem(item) {
    return `
        <div class="custom-result-layout">
            <!-- Your custom HTML structure -->
        </div>
    `;
}
```

### **3. Search Fields Customization:**
```javascript
// Customize search placeholder and help text
placeholder="جستجو در [YOUR_CONTEXT]... (مثال: [YOUR_EXAMPLES])"
```

---

## 📱 **MOBILE OPTIMIZATION RULES**

### **Required Mobile Features:**
```css
/* MANDATORY mobile optimizations */
@media (max-width: 768px) {
    .search-input-wrapper .form-control {
        font-size: 16px; /* Prevent zoom on iOS */
        padding: 12px;
    }
    
    .search-help-text {
        font-size: 0.75rem;
        margin-top: var(--space-1);
    }
    
    .result-item {
        padding: var(--space-3);
        margin-bottom: var(--space-2);
    }
}
```

---

## 🎨 **REQUIRED STYLING ENHANCEMENTS**

### **Search Highlighting:**
```css
/* MANDATORY: Professional search highlighting */
mark {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%) !important;
    color: #856404 !important;
    padding: 2px 4px !important;
    border-radius: 3px !important;
    font-weight: 600 !important;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1) !important;
}

[data-theme="dark"] mark {
    background: linear-gradient(135deg, #664d03 0%, #5a4a00 100%) !important;
    color: #ffed4a !important;
}

.highlight-result {
    background: rgba(var(--primary), 0.1) !important;
    border: 2px solid var(--primary) !important;
    border-radius: var(--radius-lg) !important;
    transition: all 0.3s ease !important;
}
```

---

## 🚀 **USAGE EXAMPLES**

### **1. Tags Page:**
```javascript
// Initialize for tags management
const tagSearch = new AdvancedSearchSystem({
    apiUrl: '/api/tags'
});
```

### **2. Users Page:**
```javascript
// Initialize for user management
const userSearch = new AdvancedSearchSystem({
    apiUrl: '/api/users'
});
```

### **3. Requests Page:**
```javascript
// Initialize for payment requests
const requestSearch = new AdvancedSearchSystem({
    apiUrl: '/api/requests'
});
```

---

## 🎯 **QUALITY STANDARDS**

### **Performance Requirements:**
- ✅ Debounced search (200ms)
- ✅ Request cancellation
- ✅ Minimal DOM manipulation
- ✅ Efficient highlighting
- ✅ Optimized mobile experience

### **UX Requirements:**
- ✅ Instant visual feedback
- ✅ Progressive enhancement
- ✅ Keyboard accessibility
- ✅ Touch-friendly interface
- ✅ Clear user guidance

### **Accessibility Requirements:**
- ✅ ARIA labels
- ✅ Keyboard navigation
- ✅ Screen reader support
- ✅ High contrast support
- ✅ Focus management

---

**🔍 Search System Status:** ✅ MANDATORY - Apply to ALL Search Features  
**📅 Version:** 1.0 Professional  
**🎯 Scope:** Universal search and filtering across entire project  
**💡 Key Features:** Multi-word, real-time, highlighted, mobile-optimized
